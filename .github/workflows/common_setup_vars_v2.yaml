name: "[WORKFLOW CALL] Setup veriables"

on:
  workflow_call:
    
    outputs:
      env_id:     
        description: "Like dev, stage or prod"
        value: ${{ jobs.common_setup_vars.outputs.env_id }}
      env_id_upper:
        description: "Uppercase env_id"
        value: ${{ jobs.common_setup_vars.outputs.env_id_upper }}
      deploy_id:
        description: "Formated ID for namespace and helm release name"
        value: ${{ jobs.common_setup_vars.outputs.deploy_id }}
      values_id:
        description: "Helm values file name ID in format values-${values_id}.yaml"
        value: ${{ jobs.common_setup_vars.outputs.values_id }}

    inputs:
      env_id:     
        description: "Like dev, stage or prod"
        required: false
        type: string
        default: ''
      deploy_id:
        description: "ID for namespace and helm release name"
        required: false
        type: string  
        default: ''
      values_id:
        description: "Helm values file name ID in format values-${values_id}.yaml"
        required: false
        type: string 
        default: ''
      branch_id:     
        description: "Trigger branch name. Needs for auto setup other variables"
        required: false
        type: string
        default: ${{ github.ref_name }}        
      production_like: 
        required: false
        type: string
        default: false

jobs:
  common_setup_vars:
    name: "Setup variables"
    runs-on: ubuntu-latest
    outputs: 
      env_id: ${{ steps.format-id.outputs.env_id }}
      env_id_upper: ${{ steps.format-id.outputs.env_id_upper }}
      deploy_id: ${{ steps.format-id.outputs.deploy_id }}      
      values_id: ${{ steps.format-id.outputs.values_id }}   
      production_like: ${{ steps.format-id.outputs.production_like }}   
    steps:
    
    - name: "Format IDs"
      id: format-id
      run: |
        case "$branch_id" in
          master) output=prod ;;
          develop) output=stage ;;
          *) output=dev ;;
        esac

        [[ -z "$deploy_id" ]] && deploy_id=$output
        [[ -z "$env_id" ]] && env_id=$output

        if [[ $env_id =~ [^dev|stage|prod] ]]; then
          echo "FATAL env_id MUST be dev, stage or prod"
          exit 1
        fi

        if [[ -z "$values_id" ]]; then
          case "$env_id" in
            prod)  values_id=prod ;;
            stage) values_id=stage
                   [[ "$deploy_id" != "stage" ]] && values_id+="-auto" ;;
            dev)   values_id=dev
                   [[ "production_like" == "true" ]] && values_id+="-prod"
            ;;
          esac
        fi

        env_id_upper=${env_id^^}
        deploy_id=$(echo "$deploy_id" | iconv -t ascii//TRANSLIT | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z)

        echo "::set-output name=env_id::${env_id}"
        echo "env_id=$env_id"

        echo "::set-output name=env_id_upper::${env_id_upper}"
        echo "env_id_upper=$env_id_upper"

        echo "::set-output name=deploy_id::${deploy_id}"
        echo "deploy_id=${deploy_id}"
        
        echo "::set-output name=values_id::${values_id}"
        echo "values_id=${values_id}"
      env:
        env_id: ${{ inputs.env_id }}
        deploy_id: ${{ inputs.deploy_id }}
        values_id: ${{ inputs.values_id }}
        branch_id: ${{ inputs.branch_id }}
        production_like: ${{ inputs.production_like }}
      shell: bash