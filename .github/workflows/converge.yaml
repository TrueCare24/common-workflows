name: "[WORKFLOW CALL] Converge project"

on:
  workflow_call:
    inputs:
      project_id:
        description: "Application and directory name"
        required: true
        type: string
      project_path:
        description: "Path to helm and werf directories under {{ project_id }}"
        required: false
        type: string
      env_id:
        description: "Environment type like dev, stage or prod"
        required: true
        type: string
      deploy_id:
        description: "ID for namespace and helm release name"
        required: true
        type: string
      values_id:
        description: "Helm values file name ID in format values-${values_id}.yaml"
        required: false
        type: string
      values:
        description: "Helm values from github as yaml"
        required: false
        type: string
      branch_id:
        description: "Branch name for checkout"
        required: false
        type: string
      debug:
        required: false
        type: boolean
        default: false

    secrets:
      HARBOR_USERNAME: 
        required: true
      HARBOR_PASSWORD: 
        required: true
      HARBOR_HOST: 
        required: true
      KUBECONFIG_DATA: 
        required: true
      SECRETS_CONTEXT:
        required: false
      REPOS_GITHUB_TOKEN:
        required: false

env:
  WERF_LOG_DEBUG: ${{ inputs.debug }}
  WERF_REPO: ${{ format ('{0}/images/{1}', secrets.HARBOR_HOST, inputs.project_id) }}
  WERF_REPO_CONTAINER_REGISTRY: harbor
  HELM_DIR: ${{ format ('{0}/{1}/helm', inputs.project_id, inputs.project_path) }}
  WERF_DIR: ${{ format ('{0}/{1}/werf', inputs.project_id, inputs.project_path) }}
  WERF_VALUES_GITHUB: ${{ format ('{0}/{1}/helm/values-github.yaml', inputs.project_id, inputs.project_path) }}
  WERF_VALUES_RUNTIME: ${{ format ('{0}/{1}/helm/values-runtime.yaml', inputs.project_id, inputs.project_path) }}
  GITHUB_SECRETS_LIST: ${{ format ('{0}/{1}/werf/github.secrets', inputs.project_id, inputs.project_path) }}
  CHART_REPO: raw.githubusercontent.com/TrueCare24/k8s-charts/develop/charts
  WERF_VALUES_SECRET: werf-values
  WERF_TIMEOUT: 900
  NS: ${{ format ('{0}-{1}', inputs.project_id, inputs.deploy_id) }}

jobs:
  common_converge:
    name: "Converge project"
    runs-on: ubuntu-latest
    steps:      

    - name: "Inputs"
      run: |
        echo "${{ toJSON(inputs) }}"
      shell: bash

    - name: "Checkout code with ref ${{ inputs.branch_id }}"
      uses: actions/checkout@v2
      if: ${{ inputs.branch_id != '' }}
      with:
        fetch-depth: 0
        ref: ${{ inputs.branch_id }}

    - name: "Checkout code"
      uses: actions/checkout@v2
      if: ${{ inputs.branch_id == '' }}
      with:
        fetch-depth: 0

    - name: "Map values from app"
      run: |
        APP_HELM_DIR=$(echo $HELM_DIR | sed -r 's/^(.+)-prereq/\1/')

        if [[ "$APP_HELM_DIR" == "$HELM_DIR" ]]; then 
          echo "Current helm chart is not prereq"
          exit 0
        fi

        APP_HELM_DIR=$(pwd)/${APP_HELM_DIR}
        cd $HELM_DIR
        for file in $(ls $APP_HELM_DIR/values*.yaml); do
          filename=${file##*/}
          
          if [[ -f $filename ]]; then
            echo "File '$filename' is exist"
            continue
          fi
          
          echo "Map '$filename' values"
          ln -s $file
        done
      shell: bash

    - name: "Env values"
      run: |
        id=$env_id
        if [[ -n "$values_id" ]]; then
          id=$values_id
        fi
        WERF_VALUES_ENV=$HELM_DIR/values-$id.yaml
        echo "WERF_VALUES_ENV=$WERF_VALUES_ENV" | tee -a $GITHUB_ENV

        if [[ ! -f $WERF_VALUES_ENV ]]; then
          echo "File '$WERF_VALUES_ENV' not found"
          exit 1
        fi
      shell: bash
      env:
        env_id: ${{ inputs.env_id }}
        values_id: ${{ inputs.values_id }}

    - name: "Github values"
      run: |
        if [[ -n "${values_github}" ]]; then
          echo -e "\n#### Install yq"
          curl -sLo yq https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 && chmod +x yq

          echo -e "\n#### Export github variables"
          json=$(echo "$values_github" | yq -o json)
          echo "$json" | jq '{ github: .}' | yq -P > "$WERF_VALUES_GITHUB"

          for key in $(echo "$json" | jq -r 'keys[]'); do
            echo "Processing '$key'"
            value=$(echo "$json" | jq --arg key $key '.[$key]')

            echo "Export variable '$key'"
            echo "$key<<EOF" >> $GITHUB_ENV
            echo "$value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          done
        else
          echo "github:" > "$WERF_VALUES_GITHUB"
        fi

        if [[ -f "$GITHUB_SECRETS_LIST" ]]; then 
          echo -e "\n#### Export secret values"

          for secret in $(cat "$GITHUB_SECRETS_LIST"); do
            echo "Processing '$secret'"
            var=''
            for var in "$secret" "${env_id^^}_${secret}"; do
              value=$(echo "${SECRETS_CONTEXT}" | jq -r --arg var "$var" '.[$var]')
              if [[ "$value" != "null" ]]; then break; fi
            done

            if [[ "$value" == "null" ]]; then
              echo "Cannot find any secret '$secret' or '$var'"
              exit 1
            fi
            
            key=$(sed -r 's/(^|_)(\w)/\U\2/g' <<<"${secret,,}")
            key=$key value=$value yq -i '.github.[env(key)] = strenv(value)' "$WERF_VALUES_GITHUB"
            
            echo "Export secret '$var' as '$key'"
            echo "$key<<EOF" >> $GITHUB_ENV
            echo "$value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          done
        fi
      shell: bash
      env:
        SECRETS_CONTEXT: ${{ secrets.SECRETS_CONTEXT }}
        env_id: ${{ inputs.env_id }}
        values_github: "${{ inputs.values }}"

    - name: "Runtime values"
      run: |
        kubeconfig=$(mktemp)
        echo "${KUBE_CONFIG_DATA}" > "$kubeconfig"
        kubectl get secret --kubeconfig="${kubeconfig}" -n $NS $WERF_VALUES_SECRET -o jsonpath="{.data['values\.yaml']}" 2> /dev/null || true | base64 -d > "$WERF_VALUES_RUNTIME"

        if [[ -z "$(cat $WERF_VALUES_RUNTIME)" ]]; then echo "Skip runtime values"; fi
      shell: bash
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}

    - name: "Preparing helm environment"
      run: |
        if [[ -n "$GITHUB_TOKEN" ]]; then 
          echo -e "\n#### Add tc24 chart repo"
          helm repo add tc24-charts https://$GITHUB_TOKEN@$CHART_REPO
        fi

        echo -e "\n#### Update helm dependencies"        
        [[ -d charts ]] && rm -rf charts/*
        helm dependencies update $HELM_DIR

        echo -e "\n#### Install yq"
        curl -sLo yq https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 && chmod +x yq

        names=($(yq e '.dependencies[].name' $HELM_DIR/Chart.yaml))
        repos=($(yq e '.dependencies[].repository' $HELM_DIR/Chart.yaml))

        echo "#### Add helm repos"
        i=-1
        while [[ $((++i)) -lt ${#names[@]} ]]; do
          if [[ ${repos[$i]} =~ http* ]]; then
            echo -e "\n#### Add repo ${names[$i]} ${repos[$i]}"
            helm repo add ${names[$i]} ${repos[$i]}
          fi
        done

        echo -e "\n#### Helm repo list"
        helm repo list || true
      shell: bash
      env: 
        GITHUB_TOKEN: ${{ secrets.REPOS_GITHUB_TOKEN }}

    - name: "Login to Harbor"
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.HARBOR_HOST }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
    
    - name: "Base64 kubeconfig"
      run: |
        echo 'kubeconfig_base64_data<<EOF' >> $GITHUB_ENV
        echo "${{ secrets.KUBECONFIG_DATA }}" | base64 >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: "Converge project"
      uses: werf/actions/converge@v1.2
      env:
        github_token: ${{ secrets.REPOS_GITHUB_TOKEN }}        
      with: 
        kube-config-base64-data: ${{ env.kubeconfig_base64_data }}
        env: ${{ inputs.deploy_id }}
        version: v1.2.80