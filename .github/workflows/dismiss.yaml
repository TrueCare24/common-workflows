name: "[WORKFLOW CALL] Dismiss project v1"

on:
  workflow_call:
    inputs:
      project_id:
        description: "Application name"
        required: true
        type: string
      project_path:
        description: "Path to helm and werf directories under {{ project_id }}"
        required: false
        type: string        
      env_id:
        description: "Environment type like dev, stage or prod"
        required: false
        type: string      
      deploy_id:
        description: "ID for namespace and helm release name"
        required: true
        type: string
      values:
        description: "Helm values from github as yaml"
        required: false
        type: string
      branch_id:
        description: "Branch name for checkout"
        required: false
        type: string        
      remove_ns:
        description: "Remove or not NS by werf"
        required: false
        default: false
        type: boolean

    secrets:
      HARBOR_USERNAME: 
        required: true
      HARBOR_PASSWORD: 
        required: true
      HARBOR_HOST: 
        required: true
      KUBECONFIG_DATA: 
        required: true
      SECRETS_CONTEXT:
        required: false
 
env:
  WERF_REPO: ${{ format ('{0}/images/{1}', secrets.HARBOR_HOST, inputs.project_id) }}
  WERF_REPO_CONTAINER_REGISTRY: harbor
  WERF_DIR: ${{ format ('{0}/{1}/werf', inputs.project_id, inputs.project_path) }}
  GITHUB_SECRETS_LIST: ${{ format ('{0}/{1}/werf/github.secrets', inputs.project_id, inputs.project_path) }}
  
jobs:
  common_dismiss:
    name: "Dismiss project"
    runs-on: ubuntu-latest
    steps:

    - name: "Checkout code with ref ${{ inputs.branch_id }}"
      uses: actions/checkout@v2
      if: ${{ inputs.branch_id != '' }}
      with:
        fetch-depth: 0
        ref: ${{ inputs.branch_id }}

    - name: "Checkout code"
      uses: actions/checkout@v2
      if: ${{ inputs.branch_id == '' }}
      with:
        fetch-depth: 0

    - name: "Github values"
      run: |
        if [[ -n "${values_github}" ]]; then
          echo -e "\n#### Install yq"
          curl -sLo yq https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 && chmod +x yq

          echo -e "\n#### Export github variables"
          json=$(echo "$values_github" | yq -o json)

          for key in $(echo "$json" | jq -r 'keys[]'); do
            echo "Processing '$key'"
            value=$(echo "$json" | jq --arg key $key '.[$key]')

            echo "Export variable '$key'"
            echo "$key<<EOF" >> $GITHUB_ENV
            echo "$value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          done
        fi

        if [[ -f "$GITHUB_SECRETS_LIST" ]]; then 
          echo -e "\n#### Export secret values"

          for secret in $(cat "$GITHUB_SECRETS_LIST"); do
            echo "Processing '$secret'"
            var=''
            for var in "$secret" "${env_id^^}_${secret}"; do
              value=$(echo "${SECRETS_CONTEXT}" | jq -r --arg var "$var" '.[$var]')
              if [[ "$value" != "null" ]]; then break; fi
            done

            if [[ "$value" == "null" ]]; then
              echo "Cannot find any secret '$secret' or '$var'"
              exit 1
            fi
            
            key=$(sed -r 's/(^|_)(\w)/\U\2/g' <<<"${secret,,}")

            echo "Export secret '$var' as '$key'"
            echo "$key<<EOF" >> $GITHUB_ENV
            echo "$value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          done
        fi
      shell: bash
      env:
        SECRETS_CONTEXT: ${{ secrets.SECRETS_CONTEXT }}
        env_id: ${{ inputs.env_id }}
        values_github: "${{ inputs.values }}"

    - name: "Login to Harbor"
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.HARBOR_HOST }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
    
    - name: "Base64 kubeconfig"
      run: |
        echo 'kubeconfig_base64_data<<EOF' >> $GITHUB_ENV
        echo "${{ secrets.KUBECONFIG_DATA }}" | base64 >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    
    - name: "Dismiss project"
      uses: werf/actions/dismiss@v1.2
      env:
        WERF_WITH_NAMESPACE: ${{ inputs.remove_ns }}
      with: 
        kube-config-base64-data: ${{ env.kubeconfig_base64_data }}
        env: ${{ inputs.deploy_id }}

    - name: "Remove NS"
      if: ${{ failure() }}
      continue-on-error: true
      uses: koslib/helm-eks-action@master
      env:
        KUBE_CONFIG_DATA: ${{ env.kubeconfig_base64_data }}
      with:
        command: kubectl delete namespace ${{ format ('{0}-{1}', inputs.project_id, inputs.deploy_id) }}